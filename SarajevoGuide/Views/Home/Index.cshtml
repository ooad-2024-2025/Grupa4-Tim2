@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager


@{
    ViewData["Title"] = "Home";
}

<div class="map-container">
    <div class="sidebar">
        <p class="section-title">CATEGORY</p>
        <div class="btn-group-vertical w-100 mb-3">
            <button class="category-btn" data-category="Sight" onclick="filterMarkers('Sight')">
                <img src="/images/camera.png" alt="Sights" />
                <span>Sights</span>
            </button>
            <button class="category-btn" data-category="Event" onclick="filterMarkers('Event')">
                <img src="/images/event.png" alt="Events" />
                <span>Events</span>
            </button>
            <button class="category-btn" data-category="Rest" onclick="filterMarkers('Rest')">
                <img src="/images/coffee.png" alt="Rest" />
                <span>Rest</span>
            </button>
        </div>

        <p class="section-title">FILTERS</p>

        <div class="mb-4">
            <label class="filter-label">Date</label>
            <div class="radio-group">
                <label><input type="radio" name="date" /> Today</label>
                <label><input type="radio" name="date" /> Tomorrow</label>
                <label><input type="radio" name="date" /> This week</label>
                <label><input type="radio" name="date" /> Pick a date…</label>
            </div>
        </div>

        <div class="mb-4">
            <label class="filter-label">Cost</label>
            <div class="radio-group">
                <label><input type="radio" name="cost" /> $</label>
                <label><input type="radio" name="cost" /> $$</label>
                <label><input type="radio" name="cost" /> $$$</label>
            </div>
        </div>

        <div class="mb-4">
            <label class="filter-label">Distance</label>
            <input type="range" min="0" max="10" value="5" class="form-range custom-range">
            <div class="distance-labels"><span>0 m</span><span>10 km</span></div>
        </div>
    </div>

    <div class="map-and-cards" style="display: flex; flex-grow: 1;">
        <div id="eventCards" class="event-cards" style="display: none; width: 25%; padding-right: 16px;"></div>
        <div id="map" style="width: 60%; height: 900px;"></div>
    </div>

</div>
@section Scripts {
    <script>
        let map;
        let markers = [];
        let currentCategory = null;
        let allEvents = [];
        const bookmarkedIds = new Set();
        const isLoggedIn = @(SignInManager.IsSignedIn(User).ToString().ToLower());

        // Filter state
        let currentFilters = {
            category: null,
            date: null,
            cost: null,
            distance: 10 // max distance in km
        };

        async function getRealImage(keyword) {
            const response = await fetch('https://google.serper.dev/images', {
                method: 'POST',
                headers: {
                    'X-API-KEY': '4876363f9f1d8017d428394cd2572016764d7c09',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ q: keyword })
            });

            if (!response.ok) return null;

            const data = await response.json();
            return data.images?.[0]?.imageUrl || null;
        }

        async function initMap() {
            const { Map } = await google.maps.importLibrary("maps");

            map = new Map(document.getElementById('map'), {
                center: { lat: 43.8563, lng: 18.4131 },
                zoom: 13,
            });

            const infoWindow = new google.maps.InfoWindow();

            const response = await fetch('/Events/GetEvents');
            allEvents = await response.json();

            for (const event of allEvents) {
                const marker = new google.maps.Marker({
                    position: { lat: event.lat, lng: event.lng },
                    map: map,
                    title: event.name
                });

                marker.kategorija = event.kategorija;
                marker.eventData = event; // Store full event data

                const imageUrl = await getRealImage(event.name).catch(() => null);

                const infoHtml = `
                    <div style="max-width: 220px;">
                        <strong>${event.name}</strong><br>
                        <span>Category: ${event.kategorija}</span><br>
                        ${event.cost ? `<span>Cost: $${event.cost}</span><br>` : ''}
                        ${event.date ? `<span>Date: ${new Date(event.date).toLocaleDateString()}</span><br>` : ''}
                        ${imageUrl ? `<img src="${imageUrl}" alt="Image" style="width: 100%; height: auto; margin-top: 8px; border-radius: 6px;" />` : ''}
                    </div>
                `;

                marker.addListener("click", () => {
                    infoWindow.setContent(infoHtml);
                    infoWindow.open(map, marker);
                });

                markers.push(marker);
            }

            // Initialize filter event listeners
            initializeFilterListeners();
        }

        function initializeFilterListeners() {
            // Date filter listeners
            const dateRadios = document.querySelectorAll('input[name="date"]');
            dateRadios.forEach((radio, index) => {
                radio.addEventListener('change', () => {
                    if (radio.checked) {
                        switch(index) {
                            case 0: currentFilters.date = 'today'; break;
                            case 1: currentFilters.date = 'tomorrow'; break;
                            case 2: currentFilters.date = 'thisweek'; break;
                            case 3:
                                // For "Pick a date" - you might want to implement a date picker
                                currentFilters.date = 'custom';
                                break;
                        }
                        applyAllFilters();
                    }
                });
            });

            // Cost filter listeners
            const costRadios = document.querySelectorAll('input[name="cost"]');
            costRadios.forEach((radio, index) => {
                radio.addEventListener('change', () => {
                    if (radio.checked) {
                        switch(index) {
                            case 0: currentFilters.cost = 'low'; break;    // $0-10
                            case 1: currentFilters.cost = 'medium'; break; // $11-20
                            case 2: currentFilters.cost = 'high'; break;   // $21+
                        }
                        applyAllFilters();
                    }
                });
            });

            // Distance filter listener
            const distanceSlider = document.querySelector('.custom-range');
            if (distanceSlider) {
                distanceSlider.addEventListener('input', (e) => {
                    currentFilters.distance = parseInt(e.target.value);
                    updateDistanceLabels(e.target.value);
                    applyAllFilters();
                });
            }
        }

        function updateDistanceLabels(value) {
            const labelsDiv = document.querySelector('.distance-labels');
            if (labelsDiv) {
                labelsDiv.innerHTML = `<span>0 m</span><span>${value} km</span>`;
            }
        }

        function isDateInRange(eventDate, filterType) {
            if (!eventDate || !filterType) return true;

            const today = new Date();
            const eventDateObj = new Date(eventDate);

            // Reset time to start of day for accurate comparison
            today.setHours(0, 0, 0, 0);
            eventDateObj.setHours(0, 0, 0, 0);

            switch(filterType) {
                case 'today':
                    return eventDateObj.getTime() === today.getTime();

                case 'tomorrow':
                    const tomorrow = new Date(today);
                    tomorrow.setDate(today.getDate() + 1);
                    return eventDateObj.getTime() === tomorrow.getTime();

                case 'thisweek':
                    const weekStart = new Date(today);
                    const weekEnd = new Date(today);
                    weekStart.setDate(today.getDate() - today.getDay()); // Start of week (Sunday)
                    weekEnd.setDate(weekStart.getDate() + 6); // End of week (Saturday)
                    return eventDateObj >= weekStart && eventDateObj <= weekEnd;

                case 'custom':
                    // Implement custom date logic here if needed
                    return true;

                default:
                    return true;
            }
        }

        function isCostInRange(eventCost, filterType) {
            if (!eventCost || !filterType) return true;

            const cost = parseFloat(eventCost);

            switch(filterType) {
                case 'low':    // $0-10
                    return cost >= 0 && cost <= 10;
                case 'medium': // $11-20
                    return cost >= 11 && cost <= 20;
                case 'high':   // $21+
                    return cost >= 21;
                default:
                    return true;
            }
        }

        function calculateDistance(lat1, lng1, lat2, lng2) {
            const R = 6371; // Earth's radius in kilometers
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLng = (lng2 - lng1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLng/2) * Math.sin(dLng/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function isWithinDistance(eventLat, eventLng, maxDistance) {
            const centerLat = 43.8563; // Sarajevo center
            const centerLng = 18.4131;
            const distance = calculateDistance(centerLat, centerLng, eventLat, eventLng);
            return distance <= maxDistance;
        }

        function applyAllFilters() {
            const filteredEvents = allEvents.filter(event => {
                // Category filter
                if (currentFilters.category && event.kategorija !== currentFilters.category) {
                    return false;
                }

                // Date filter
                if (currentFilters.date && !isDateInRange(event.date, currentFilters.date)) {
                    return false;
                }

                // Cost filter
                if (currentFilters.cost && !isCostInRange(event.cost, currentFilters.cost)) {
                    return false;
                }

                // Distance filter
                if (!isWithinDistance(event.lat, event.lng, currentFilters.distance)) {
                    return false;
                }

                return true;
            });

            // Update markers on map
            markers.forEach(marker => {
                const shouldShow = filteredEvents.some(event =>
                    event.lat === marker.getPosition().lat() &&
                    event.lng === marker.getPosition().lng()
                );
                marker.setMap(shouldShow ? map : null);
            });

            // Update cards display
            if (currentFilters.category) {
                renderFilteredCards(filteredEvents);
            } else if (filteredEvents.length < allEvents.length) {
                // Show cards if any filters are active
                renderFilteredCards(filteredEvents);
            }
        }

        function filterMarkers(category) {
            const allButtons = document.querySelectorAll('.category-btn');
            const container = document.getElementById("eventCards");

            if (currentFilters.category === category) {
                // 2nd click → remove category filter
                currentFilters.category = null;
                allButtons.forEach(btn => btn.classList.remove('active'));

                // If no other filters are active, hide cards
                if (!currentFilters.date && !currentFilters.cost && currentFilters.distance === 10) {
                    container.style.display = "none";
                }
            } else {
                // 1st click → set category filter
                currentFilters.category = category;
                allButtons.forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.dataset.category === category) btn.classList.add('active');
                });
            }

            applyAllFilters();
        }

        function renderFilteredCards(filteredEvents) {
            const container = document.getElementById("eventCards");
            container.style.display = "block";

            let html = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; margin-left: 10px;">
                    <span style="font-size: 14px; color: #666;">${filteredEvents.length} results</span>
                    <button id="closeBookmarksBtn" style="border: none; background: none; font-size: 20px; cursor: pointer;">✖</button>
                </div>
            `;

            for (const e of filteredEvents) {
                html += `
                    <div class="event-card mb-4" data-event-id="${e.id}">
                        <div class="card-image-placeholder" id="img-${e.id}">
                            <div style="width: 100%; height: 150px; background-color: #eee;"></div>
                        </div>
                        <div class="card-content">
                            <h3 class="card-title">${e.name}</h3>
                            <p class="card-subtitle">${e.description ? e.description : ''}</p>
                            ${e.cost ? `<p class="card-cost" style="color: #28a745; font-weight: bold;">Cost: $${e.cost}</p>` : ''}
                            ${e.date ? `<p class="card-date" style="color: #007bff;">Date: ${new Date(e.date).toLocaleDateString()}</p>` : ''}
                            <div class="card-rating">
                                <span class="star">★</span><span class="star">★</span><span class="star">★</span>
                                <span class="star">☆</span><span class="star">☆</span>
                                <span class="rating-text">3.0</span>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center mt-3">
                                ${isLoggedIn ? `<span class="bookmark-icon" onclick="toggleBookmark(${e.id})">♡</span>` : ''}
                                ${
                                    e.kategorija === 'Event'
                                        ? `<div class="d-flex gap-2">
                                               <a href="/Recenzijas/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>
                                               <a href="/Kupovinas/Create?eventId=${e.id}" class="btn btn-primary btn-sm">Kupi</a>
                                         
                                           </div>`
                                        : `<a href="/Recenzijas/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>`
                                }
                            </div>
                        </div>
                    </div>
                `;
            }

            container.innerHTML = html;

            const closeBtn = document.getElementById("closeBookmarksBtn");
            if (closeBtn) {
                closeBtn.addEventListener("click", () => {
                    container.style.display = "none";
                    clearAllFilters();
                });
            }

            // Load images for filtered events
            for (const e of filteredEvents) {
                getRealImage(e.name).then(imageUrl => {
                    if (imageUrl) {
                        const img = document.getElementById(`img-${e.id}`);
                        if (img) img.innerHTML = `<img src="${imageUrl}" style="width: 100%; height: auto;" />`;
                    }
                });
            }
        }

        function clearAllFilters() {
            currentFilters = {
                category: null,
                date: null,
                cost: null,
                distance: 10
            };

            // Reset UI elements
            document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('input[name="date"]').forEach(radio => radio.checked = false);
            document.querySelectorAll('input[name="cost"]').forEach(radio => radio.checked = false);
            const distanceSlider = document.querySelector('.custom-range');
            if (distanceSlider) {
                distanceSlider.value = 10;
                updateDistanceLabels(10);
            }

            // Show all markers
            markers.forEach(marker => marker.setMap(map));
        }

        function toggleBookmark(eventId) {
            const icon = document.querySelector(`.event-card[data-event-id="${eventId}"] .bookmark-icon`);
            if (bookmarkedIds.has(eventId)) {
                bookmarkedIds.delete(eventId);
                icon.classList.remove('active');
                icon.textContent = '♡';
            } else {
                bookmarkedIds.add(eventId);
                icon.classList.add('active');
                icon.textContent = '♥';
            }
            localStorage.setItem("bookmarkedEventIds", JSON.stringify([...bookmarkedIds]));
        }

        function hideAllBookmarks() {
            bookmarkedIds.clear();
            localStorage.removeItem("bookmarkedEventIds");

            document.querySelectorAll(".bookmark-icon").forEach(icon => {
                icon.classList.remove("active");
                icon.textContent = "♡";
            });
        }

        // Legacy functions for compatibility
        function renderCards(category) {
            const filtered = allEvents.filter(e => e.kategorija === category);
            renderFilteredCards(filtered);
        }

        function renderAllCards() {
            renderFilteredCards(allEvents);
        }

        window.initMap = initMap;
    </script>
    <!--  Load Google Maps API -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFJUeEaeMvw0dht4bnVPCb799EFW-8-Ao&callback=initMap">
    </script>
}