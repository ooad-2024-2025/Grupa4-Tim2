@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager


@{
    ViewData["Title"] = "Home";
}

<div class="map-container">
    <div class="sidebar">
        <p class="section-title">CATEGORY</p>
        <div class="btn-group-vertical w-100 mb-3">
            <button class="category-btn" data-category="Sight" onclick="filterMarkers('Sight')">
                <img src="/images/camera.png" alt="Sights" />
                <span>Sights</span>
            </button>
            <button class="category-btn" data-category="Event" onclick="filterMarkers('Event')">
                <img src="/images/event.png" alt="Events" />
                <span>Events</span>
            </button>
            <button class="category-btn" data-category="Rest" onclick="filterMarkers('Rest')">
                <img src="/images/coffee.png" alt="Rest" />
                <span>Rest</span>
            </button>
        </div>

        <p class="section-title">FILTERS</p>

        <div class="mb-4">
            <label class="filter-label">Date</label>
            <div class="radio-group">
                <label><input type="radio" name="date" /> Today</label>
                <label><input type="radio" name="date" /> Tomorrow</label>
                <label><input type="radio" name="date" /> This week</label>
                <label><input type="radio" name="date" /> Pick a date…</label>
            </div>
        </div>

        <div class="mb-4">
            <label class="filter-label">Cost</label>
            <div class="radio-group">
                <label><input type="radio" name="cost" /> $</label>
                <label><input type="radio" name="cost" /> $$</label>
                <label><input type="radio" name="cost" /> $$$</label>
            </div>
        </div>

        <div class="mb-4">
            <label class="filter-label">Distance</label>
            <input type="range" min="0" max="10" value="5" class="form-range custom-range">
            <div class="distance-labels"><span>0 m</span><span>10 km</span></div>
        </div>
    </div>

    <div class="map-and-cards" style="display: flex; flex-grow: 1;">
        <div id="eventCards" class="event-cards" style="display: none; width: 25%; padding-right: 16px;"></div>
        <div id="map" style="width: 60%; height: 900px;"></div>
    </div>

</div>
@section Scripts {
    <script>
        let map;
        let markers = [];
        let currentCategory = null;
        let allEvents = [];
        const bookmarkedIds = new Set();
        const isLoggedIn = @(SignInManager.IsSignedIn(User).ToString().ToLower());

        async function getRealImage(keyword) {
            const response = await fetch('https://google.serper.dev/images', {
                method: 'POST',
                headers: {
                    'X-API-KEY': '4876363f9f1d8017d428394cd2572016764d7c09',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ q: keyword })
            });

            if (!response.ok) return null;

            const data = await response.json();
            return data.images?.[0]?.imageUrl || null;
        }


        async function initMap() {
            const { Map } = await google.maps.importLibrary("maps");

            map = new Map(document.getElementById('map'), {
                center: { lat: 43.8563, lng: 18.4131 },
                zoom: 13,
            });

            const infoWindow = new google.maps.InfoWindow();

            const response = await fetch('/Events/GetEvents');
            allEvents = await response.json();

            for (const event of allEvents) {
            const marker = new google.maps.Marker({
                position: { lat: event.lat, lng: event.lng },
                map: map,
                title: event.name
            });

            marker.kategorija = event.kategorija;

            const imageUrl = await getRealImage(event.name).catch(() => null);

            const infoHtml = `
                <div style="max-width: 220px;">
                    <strong>${event.name}</strong><br>
                    <span>Category: ${event.kategorija}</span><br>
                    ${imageUrl ? `<img src="${imageUrl}" alt="Image" style="width: 100%; height: auto; margin-top: 8px; border-radius: 6px;" />` : ''}
                </div>
            `;

            marker.addListener("click", () => {
                infoWindow.setContent(infoHtml);
                infoWindow.open(map, marker);
            });

            markers.push(marker);
        }
        }


        function toggleBookmark(eventId) {
            const icon = document.querySelector(`.event-card[data-event-id="${eventId}"] .bookmark-icon`);
            if (bookmarkedIds.has(eventId)) {
                bookmarkedIds.delete(eventId);
                icon.classList.remove('active');
                icon.textContent = '♡';
            } else {
                bookmarkedIds.add(eventId);
                icon.classList.add('active');
                icon.textContent = '♥';
            }
            localStorage.setItem("bookmarkedEventIds", JSON.stringify([...bookmarkedIds]));
        }


        function renderCards(category) {
            const container = document.getElementById("eventCards");
            container.style.display = "block";

            const filtered = allEvents.filter(e => e.kategorija === category);

            let html = `
                <div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">
                    <button id="closeBookmarksBtn" style="border: none; background: none; font-size: 20px; cursor: pointer;">✖</button>
                </div>
            `;

            for (const e of filtered) {
                html += `
                    <div class="event-card mb-4" data-event-id="${e.id}">
                        <div class="card-image-placeholder" id="img-${e.id}">
                            <div style="width: 100%; height: 150px; background-color: #eee;"></div>
                        </div>
                        <div class="card-content">
                            <h3 class="card-title">${e.name}</h3>
                            <p class="card-subtitle">${e.description ? e.description : ''}</p>
                            <div class="card-rating">
                                <span class="star">★</span><span class="star">★</span><span class="star">★</span>
                                <span class="star">☆</span><span class="star">☆</span>
                                <span class="rating-text">3.0</span>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center mt-3">
                                ${isLoggedIn ? `<span class="bookmark-icon" onclick="toggleBookmark(${e.id})">♡</span>` : ''}
                                ${
                                    e.kategorija === 'Event'
                                        ? `<div class="d-flex gap-2">
                                               <a href="/Recenzije/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>
                                               <button class="btn btn-primary btn-sm">Kupi</button>
                                           </div>`
                                        : `<a href="/Recenzijas/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>`
                                }
                            </div>
                        </div>
                    </div>
                `;
            }

            container.innerHTML = html;

            const closeBtn = document.getElementById("closeBookmarksBtn");
            if (closeBtn) {
                closeBtn.addEventListener("click", hideAllBookmarks);
            }

            for (const e of filtered) {
                getRealImage(e.name).then(imageUrl => {
                    if (imageUrl) {
                        const img = document.getElementById(`img-${e.id}`);
                        if (img) img.innerHTML = `<img src="${imageUrl}" style="width: 100%; height: auto;" />`;
                    }
                });
            }
        }



           function filterMarkers(category) {
            const allButtons = document.querySelectorAll('.category-btn');
            const container = document.getElementById("eventCards");

            if (currentCategory === category) {
                // 2nd click → show all markers
                currentCategory = null;
                allButtons.forEach(btn => btn.classList.remove('active'));
                markers.forEach(marker => marker.setMap(map));
                container.style.display = "block";
                renderAllCards(); // show all cards
            } else {
                // 1st click → filter
                currentCategory = category;
                allButtons.forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.dataset.category === category) btn.classList.add('active');
                });
                markers.forEach(marker => {
                    marker.setMap(marker.kategorija === category ? map : null);
                });
                container.style.display = "block";
                renderCards(category); // filtered cards
            }
        }

                function hideAllBookmarks() {
            bookmarkedIds.clear();
            localStorage.removeItem("bookmarkedEventIds");

            document.querySelectorAll(".bookmark-icon").forEach(icon => {
                icon.classList.remove("active");
                icon.textContent = "♡";
            });
        }


        window.initMap = initMap;
    </script>
    <!--  Load Google Maps API -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFJUeEaeMvw0dht4bnVPCb799EFW-8-Ao&callback=initMap">
    </script>
}
