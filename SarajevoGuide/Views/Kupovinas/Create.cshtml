@model SarajevoGuide.Models.Kupovina

@{
    ViewData["Title"] = "Nova kupovina";
    ViewData["HideNavbar"] = true;
    var eventName = ViewData["EventName"] as string;
    var eventId = ViewData["EventId"];
}

<div class="container d-flex justify-content-center align-items-center" style="min-height: 85vh;">
    <div class="card shadow-sm rounded-4 p-4 d-flex flex-row gap-4 align-items-start" style="width: 100%; max-width: 900px; background-color: #ffffff;">

        <!-- Left: Image -->
        <div style="flex: 1 1 40%; max-width: 300px; border-radius: 10px; overflow: hidden;">
            <div id="event-image" style="width: 100%; height: 250px; background-color: #f0f0f0;"></div>
        </div>

        <!-- Right: Form -->
        <div style="flex: 1 1 55%; max-width: 450px;">
            <h2 class="text-center mb-4 fw-bold" style="color: #e44c3c;">@eventName</h2>

         

            <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>

            <form asp-action="Create" method="post">
                <div class="mb-3">
                    <label asp-for="brojUlaznica" class="form-label fw-semibold">Broj ulaznica</label>
                    <input asp-for="brojUlaznica" class="form-control rounded-3" min="1" />
                    <span asp-validation-for="brojUlaznica" class="text-danger small"></span>
                </div>

                <input type="hidden" name="eventId" value="@eventId" />

                <div class="d-grid mb-3">
                    <button type="submit" class="btn rounded-3 fw-bold" style="background-color: #e44c3c; color: white;">KUPI</button>
                </div>
            </form>

            <div class="text-center">
                <a asp-action="Index" class="text-muted text-decoration-none">⟵ Nazad</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        async function getRealImage(keyword) {
            const response = await fetch('https://google.serper.dev/images', {
                method: 'POST',
                headers: {
                    'X-API-KEY': '3cf222e01d16e17edd78a9447996516850a7661b',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ q: keyword })
            });

            if (!response.ok) return null;
            const data = await response.json();
            return data.images?.[0]?.imageUrl || null;
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const eventName = @Html.Raw(Json.Serialize(eventName));
            if (eventName) {
                const imageUrl = await getRealImage(eventName);
                if (imageUrl) {
                    document.getElementById("event-image").innerHTML =
                        `<img src="${imageUrl}" style="width: 100%; height: 100%; object-fit: cover;" />`;
                }
            }
        });
    </script>
}
