@model IEnumerable<SarajevoGuide.Models.Event>
@{
    ViewData["Title"] = "Events - Admin";
}



<div class="admin-container">
    <div class="sidebar">
        <div class="section-title">MANAGE ITEMS</div>

        <a class="category-btn" href="#" data-category="Sight">
            <img src="/images/camera.png" alt="Sights" />
            Sights
        </a>
        <a class="category-btn" href="#" data-category="Event">
            <img src="/images/event.png" alt="Events" />
            Events
        </a>
        <a class="category-btn" href="#" data-category="Rest">
            <img src="/images/coffee.png" alt="Rest" />
            Rest
        </a>

        <div class="section-title" style="margin-top: 30px;">MANAGE ACCOUNTS</div>

        <a class="category-btn" href="#" id="usersButton">
            <img src="/images/user.png" alt="Users" />
            Users
        </a>

    </div>

    <div class="admin-content">
        <div class="admin-header">
            <h2>Manage Events</h2>
            <a asp-action="Create" class="btn">+</a>
        </div>

        <div class="cards-grid" id="contentGrid">
            @foreach (var item in Model)
            {
                <div class="event-card" onclick="openEventModal(@item.Id, '@Html.Raw(Html.Encode(item.Name))', '@item.Kategorija', '@Html.Raw(Html.Encode(item.Description))', '@item.StartDate?.ToString("dd-MM-yyyy")', '@item.EndDate?.ToString("dd-MM-yyyy")', '@item.Price', '@item.Lat', '@item.Lng')">
                    <div class="card-image-placeholder" id="admin-img-@item.Id">
                        <div style="width: 100%; height: 150px; background-color: #eee;"></div>
                    </div>
                    <div class="card-content">
                        <h3 class="card-title">@item.Name</h3>
                        <p class="card-subtitle">@item.Kategorija</p>

                        <div class="card-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star">☆</span>
                            }
                            <span class="rating-text">(0)</span>
                        </div>

                        <div class="card-details">
                            <div class="detail-item">
                                <strong>Start:</strong> @item.StartDate?.ToString("MMM dd, yyyy")
                            </div>
                            <div class="detail-item">
                                <strong>End:</strong> @item.EndDate?.ToString("MMM dd, yyyy")
                            </div>
                            <div class="detail-item">
                                <strong>Price:</strong> @item.Price KM
                            </div>
                            <div class="detail-item">
                                <strong>Location:</strong> @item.Lat, @item.Lng
                            </div>
                        </div>

                        <div class="card-actions">

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal-overlay" id="eventDetailsModal" style="display: none;">
    <div class="event-details-modal", style="padding-top: 29px">
        <!-- Close Button -->
        <button class="modal-close-btn" onclick="closeEventModal()">&times;</button>

        <div class="modal-content-wrapper">
            <!-- Left Side - Image and Basic Info -->
            <div class="modal-left">
                <div class="event-image-container">
                    <div class="event-image-placeholder">
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                            <circle cx="8.5" cy="8.5" r="1.5" />
                            <polyline points="21,15 16,10 5,21" />
                        </svg>
                    </div>
                    <!-- Change Image button removed -->
                </div>

                <div class="event-basic-info">
                    <h2 class="event-title" id="modalEventTitle"></h2>
                    <p class="event-category" id="modalEventCategory"></p>

                    <div class="event-rating">
                        <span class="star">☆</span>
                        <span class="star">☆</span>
                        <span class="star">☆</span>
                        <span class="star">☆</span>
                        <span class="star">☆</span>
                        <span class="rating-text">(0 reviews)</span>
                    </div>
                </div>
            </div>

            <!-- Right Side - Details Form -->
            <div class="modal-right">
                <div class="details-section">
                    <h3 class="section-heading">Event Details</h3>

                    <div class="form-group">
                        <label class="form-label">Event Name</label>
                        <input type="text" class="form-control" id="modalEventName" />
                    </div>

                    <!-- Replace the problematic code block with the following: -->
                    <div class="form-group">
                        <label class="form-label text-uppercase small fw-bold text-muted" for="modalEventCategorySelect">Category</label>
                        <select class="form-select rounded-3 shadow-sm" id="modalEventCategorySelect" name="Kategorija">
                            @foreach (var value in Enum.GetValues(typeof(SarajevoGuide.Enums.Kategorija)))
                            {
                                <option value="@value">@value</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-control description-field" id="modalEventDescription"></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group half-width">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="modalEventStartDate" />
                        </div>
                        <div class="form-group half-width">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-control" id="modalEventEndDate" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Price (KM)</label>
                        <input type="number" step="0.01" class="form-control" id="modalEventPrice" />
                    </div>

                    <div class="form-row">
                        <div class="form-group half-width">
                            <label class="form-label">Latitude</label>
                            <input type="number" step="any" class="form-control" id="modalEventLat" />
                        </div>
                        <div class="form-group half-width">
                            <label class="form-label">Longitude</label>
                            <input type="number" step="any" class="form-control" id="modalEventLng" />
                        </div>
                    </div>
                </div>

                <!-- Reviews Section -->
                <div class="reviews-section">
                    <h3 class="section-heading">Reviews</h3>

                    <div class="review-item">
                        <label class="form-label">Review Title</label>
                        <input type="text" class="form-control" placeholder="No reviews yet" readonly />
                    </div>

                    <div class="review-item">
                        <label class="form-label">Review Body</label>
                        <textarea class="form-control" placeholder="No reviews available" readonly></textarea>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="modal-footer">
            <button class="btn-success" id="modalApplyBtn" onclick="applyChanges()">Apply Changes</button>
            <button class="btn-danger" id="modalDeleteBtn" onclick="deleteCurrentEvent()">Delete Item</button>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay" style="display: none;">
    <div class="loading-spinner"></div>
</div>



<!-- User Details Modal -->
<div class="modal-overlay" id="userDetailsModal" style="display: none;">
    <div class="user-details-modal" style="padding-top: 29px">
        <!-- Close Button -->
        <button class="modal-close-btn" onclick="closeUserModal()">&times;</button>

        <div class="modal-content-wrapper">
            <!-- Left Side - Image and Basic Info -->
            <div class="modal-left">
                <div class="user-image-container">
                    <div class="user-image-placeholder">
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                    </div>
                </div>

                <div class="user-basic-info">
                    <h2 class="user-title" id="modalUserTitle"></h2>
                    <p class="user-email" id="modalUserEmail"></p>
                </div>
            </div>

            <!-- Right Side - Details Form -->
            <div class="modal-right">
                <div class="details-section">
                    <h3 class="section-heading">User Details</h3>

                    <div class="form-group">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-control" id="modalUsername" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="modalUserEmailInput" />
                    </div>

                    <div class="form-row">
                        <div class="form-group half-width">
                            <label class="form-label">First Name</label>
                            <input type="text" class="form-control" id="modalUserFirstName" />
                        </div>
                        <div class="form-group half-width">
                            <label class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="modalUserLastName" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Password (leave blank to keep current)</label>
                        <input type="password" class="form-control" id="modalUserPassword" placeholder="Enter new password or leave blank" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="modal-footer">
            <button class="btn-success" id="modalApplyUserBtn" onclick="editCurrentUser()">Edit</button>
            <button class="btn-danger" id="modalDeleteUserBtn" onclick="deleteCurrentUser()">Delete User</button>

            <script>
                // ...existing JS code...

                // Function to go to Edit view of RegistrovaniKorisnik
                function editCurrentUser() {
                    if (currentUserId) {
                        window.location.href = '/RegistrovaniKorisniks/Edit/' + currentUserId;
                    }
                }
            </script>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay" style="display: none;">
    <div class="loading-spinner"></div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle users button click
            $('#usersButton').click(function(e) {
                e.preventDefault();
                loadUsers();
            });

            // Function to load users via AJAX
            function loadUsers() {
                $('#loadingOverlay').show();

                $.ajax({
                    url: '/RegistrovaniKorisniks/GetAllUsers',
                    type: 'GET',
        success: function(response) {
            // If response is an array, just render it
            if (Array.isArray(response)) {
                renderUsers(response);
            } else if (response.success) {
                renderUsers(response.data);
            } else {
                alert('Error loading users: ' + response.message);
            }
        },
                    error: function(xhr, status, error) {
                        alert('Error loading users: ' + error);
                    },
                    complete: function() {
                        $('#loadingOverlay').hide();
                    }
                });
            }

            // Function to render users in the grid
        function renderUsers(users) {
            var grid = $('#contentGrid');
            grid.empty();

            if (users.length === 0) {
                grid.html('<p>No users found.</p>');
                return;
            }

            users.forEach(function(user) {
                var userCard = `
                    <div class="event-card" onclick="openUserModal(${user.id}, '${user.username || ''}', '${user.email || ''}', '${user.ime || ''}', '${user.prezime || ''}')">
                        <div class="card-image-placeholder">
                            <div style="width: 100%; height: 150px; background-color: #eee; display: flex; align-items: center; justify-content: center;">
                                <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="#666">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                </svg>
                            </div>
                        </div>
                        <div class="card-content">
                            <h3 class="card-title">${user.username || 'No username'}</h3>
                            <p class="card-subtitle">${user.ime || ''} ${user.prezime || ''}</p>

                            <div class="card-details">
                                <div class="detail-item">
                                    <strong>Email:</strong> ${user.email || 'N/A'}
                                </div>
                                <div class="detail-item">
                                    <strong>Name:</strong> ${user.ime || 'N/A'} ${user.prezime || ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                grid.append(userCard);
            });
        }
        });

        // ... rest of your existing JavaScript functions ...
    </script>
}



<script>
    let currentEventId = null;
    let originalEventData = null;

    async function getRealImage(keyword) {
        const response = await fetch('https://google.serper.dev/images', {
            method: 'POST',
            headers: {
                'X-API-KEY': '3cf222e01d16e17edd78a9447996516850a7661b',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ q: keyword })
        });

        if (!response.ok) return null;
        const data = await response.json();
        return data.images?.[0]?.imageUrl || null;
    }

    async function loadAdminImages() {
        const cards = document.querySelectorAll('.event-card');
        for (const card of cards) {
            const name = card.querySelector('.card-title')?.textContent;
            const id = card.getAttribute('onclick')?.match(/\d+/)?.[0]; // extract ID from onclick
            if (name && id) {
                const url = await getRealImage(name).catch(() => null);
                if (url) {
                    const container = document.getElementById(`admin-img-${id}`);
                    if (container) {
                        container.innerHTML = `<img src="${url}" style="width: 100%; height: auto;" />`;
                    }
                }
            }
        }
    }

    window.addEventListener('DOMContentLoaded', loadAdminImages);

    // Category filtering functionality
    document.querySelectorAll('.category-btn[data-category]').forEach(button => {
        let clickCount = 0;

        button.addEventListener('click', function (e) {
            e.preventDefault();
            clickCount++;

            setTimeout(() => {
                const category = this.dataset.category;

                if (clickCount === 1) {
                    if (category) {
                        window.location.href = `?category=${category}`;
                    }
                } else if (clickCount === 2) {
                    window.location.href = `/Events`;
                }

                clickCount = 0;
            }, 250);
        });
    });





    // Function to open event modal
    // Function to open event modal with image loading
    async function openEventModal(eventId, name, category, description, startDate, endDate, price, lat, lng) {
        currentEventId = eventId;

        // Store original data for comparison
        originalEventData = {
            name: name,
            category: category,
            description: description || '',
            startDate: startDate || '',
            endDate: endDate || '',
            price: price || '',
            lat: lat || '',
            lng: lng || ''
        };

        // Populate modal with event data
        document.getElementById('modalEventTitle').textContent = name;
        document.getElementById('modalEventCategory').textContent = category;
        document.getElementById('modalEventName').value = name;
        document.getElementById('modalEventCategorySelect').value = category;
        document.getElementById('modalEventDescription').value = description || '';
        document.getElementById('modalEventStartDate').value = startDate || '';
        document.getElementById('modalEventEndDate').value = endDate || '';
        document.getElementById('modalEventPrice').value = price || '';
        document.getElementById('modalEventLat').value = lat || '';
        document.getElementById('modalEventLng').value = lng || '';

        // Load real image for the modal
        const modalImageContainer = document.querySelector('.event-image-placeholder');
        if (modalImageContainer && name) {
            // Show loading state
            modalImageContainer.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; height: 100%;">
                    <div style="width: 20px; height: 20px; border: 2px solid #ddd; border-top: 2px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                </div>
            `;

            try {
                const imageUrl = await getRealImage(name);
                if (imageUrl) {
                    modalImageContainer.innerHTML = `<img src="${imageUrl}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 6px;" alt="${name}" />`;
                } else {
                    // Fallback to default placeholder if no image found
                    modalImageContainer.innerHTML = `
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                            <circle cx="8.5" cy="8.5" r="1.5" />
                            <polyline points="21,15 16,10 5,21" />
                        </svg>
                    `;
                }
            } catch (error) {
                console.error('Error loading image:', error);
                // Fallback to default placeholder on error
                modalImageContainer.innerHTML = `
                    <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                        <circle cx="8.5" cy="8.5" r="1.5" />
                        <polyline points="21,15 16,10 5,21" />
                    </svg>
                `;
            }
        }

        // Show modal with animation
        const modal = document.getElementById('eventDetailsModal');
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // Prevent body scroll when modal is open
        document.body.style.overflow = 'hidden';
    }



    // Function to close event modal
    function closeEventModal() {
        const modal = document.getElementById('eventDetailsModal');
        modal.classList.remove('show');

        setTimeout(() => {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }, 300);

        currentEventId = null;
        originalEventData = null;
    }

    // Function to show loading overlay
    function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    // Function to hide loading overlay
    function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    // Function to show notification
    function showNotification(message, type = 'success') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <span>${message}</span>
            <button onclick="this.parentElement.remove()">&times;</button>
        `;

        // Add notification styles if not already added
        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 20px;
                    border-radius: 4px;
                    color: white;
                    z-index: 3000;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    max-width: 400px;
                    animation: slideIn 0.3s ease;
                }
                .notification-success { background-color: #28a745; }
                .notification-error { background-color: #dc3545; }
                .notification button {
                    background: none;
                    border: none;
                    color: white;
                    cursor: pointer;
                    font-size: 18px;
                    padding: 0;
                    margin-left: auto;
                }
                @@keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    // Function to apply changes
    async function applyChanges() {
        if (!currentEventId) {
            showNotification('No event selected', 'error');
            return;
        }

        // Get form data
        const formData = {
            Id: currentEventId,
            Name: document.getElementById('modalEventName').value.trim(),
            Kategorija: document.getElementById('modalEventCategorySelect').value,
            Description: document.getElementById('modalEventDescription').value.trim(),
            StartDate: document.getElementById('modalEventStartDate').value || null,
            EndDate: document.getElementById('modalEventEndDate').value || null,
            Price: parseFloat(document.getElementById('modalEventPrice').value) || null,
            Lat: parseFloat(document.getElementById('modalEventLat').value) || null,
            Lng: parseFloat(document.getElementById('modalEventLng').value) || null
        };

        // Basic validation
        if (!formData.Name) {
            showNotification('Event name is required', 'error');
            return;
        }

        if (!formData.Kategorija) {
            showNotification('Category is required', 'error');
            return;
        }

        // Check if anything has changed
        const hasChanges = (
            formData.Name !== originalEventData.name ||
            formData.Kategorija !== originalEventData.category ||
            formData.Description !== originalEventData.description ||
            formData.StartDate !== originalEventData.startDate ||
            formData.EndDate !== originalEventData.endDate ||
            (formData.Price || '').toString() !== originalEventData.price.toString() ||
            (formData.Lat || '').toString() !== originalEventData.lat.toString() ||
            (formData.Lng || '').toString() !== originalEventData.lng.toString()
        );

        if (!hasChanges) {
            showNotification('No changes detected', 'error');
            return;
        }

        try {
            showLoading();

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                         document.querySelector('meta[name="__RequestVerificationToken"]')?.content;

            const response = await fetch('/Events/EditModal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    ...(token && { 'RequestVerificationToken': token })
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success) {
                showNotification(result.message || 'Event updated successfully!', 'success');

                // Update the display elements
                document.getElementById('modalEventTitle').textContent = formData.Name;
                document.getElementById('modalEventCategory').textContent = formData.Kategorija;

                // Update original data
                originalEventData = {
                    name: formData.Name,
                    category: formData.Kategorija,
                    description: formData.Description,
                    startDate: formData.StartDate || '',
                    endDate: formData.EndDate || '',
                    price: formData.Price || '',
                    lat: formData.Lat || '',
                    lng: formData.Lng || ''
                };

                // Optionally refresh the page after a delay to show updated data in the grid
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                if (result.errors && result.errors.length > 0) {
                    const errorMessages = result.errors.map(error =>
                        `${error.Field}: ${error.Errors.join(', ')}`).join('\n');
                    showNotification(`Validation errors:\n${errorMessages}`, 'error');
                } else {
                    showNotification(result.message || 'Failed to update event', 'error');
                }
            }
        } catch (error) {
            console.error('Error updating event:', error);
            showNotification('An error occurred while updating the event', 'error');
        } finally {
            hideLoading();
        }
    }

    // Function to edit current event (navigate to edit page)
    function editCurrentEvent() {
        if (currentEventId) {
            window.location.href = '@Url.Action("Edit", "Events")' + '/' + currentEventId;
        }
    }

    // Function to delete current event
    function deleteCurrentEvent() {
        if (currentEventId && confirm('Are you sure you want to delete this event?')) {
            window.location.href = '@Url.Action("Delete", "Events")' + '/' + currentEventId;
        }
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal-overlay')) {
            closeEventModal();
        }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeEventModal();
        }
    });

    function showImage(filteredEvents) {
            const container = document.getElementById("eventCards");
            container.style.display = "block";

            let html = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; margin-left: 10px;">
                    <span style="font-size: 14px; color: #666;">${filteredEvents.length} results</span>
                    <button id="closeBookmarksBtn" style="border: none; background: none; font-size: 20px; cursor: pointer;">✖</button>
                </div>
            `;

            for (const e of filteredEvents) {
                html += `
                    <div class="event-card mb-4" data-event-id="${e.id}">
                        <div class="card-image-placeholder" id="img-${e.id}">
                            <div style="width: 100%; height: 150px; background-color: #eee;"></div>
                        </div>
                        <div class="card-content">
                            <h3 class="card-title">${e.name}</h3>
                            <p class="card-subtitle">${e.description ? e.description : ''}</p>
                            ${e.cost ? `<p class="card-cost" style="color: #28a745; font-weight: bold;">Cost: $${e.cost}</p>` : ''}
                            ${e.date ? `<p class="card-date" style="color: #007bff;">Date: ${new Date(e.date).toLocaleDateString()}</p>` : ''}
                            <div class="card-rating">
                                <span class="star">★</span><span class="star">★</span><span class="star">★</span>
                                <span class="star">☆</span><span class="star">☆</span>
                                <span class="rating-text">3.0</span>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center mt-3">
                                ${isLoggedIn ? `<span class="bookmark-icon" onclick="toggleBookmark(${e.id})">♡</span>` : ''}
                                ${
                                    e.kategorija === 'Event'
                                        ? `<div class="d-flex gap-2">
                                               <a href="/Recenzijas/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>
                                               <a href="/Kupovinas/Create?eventId=${e.name}" class="btn btn-primary btn-sm">Kupi</a>

                                           </div>`
                                        : `<a href="/Recenzijas/Create?eventId=${e.id}" class="btn btn-outline-secondary btn-sm">Ostavi recenziju</a>`
                                }
                            </div>
                        </div>
                    </div>
                `;
            }

            container.innerHTML = html;

            const closeBtn = document.getElementById("closeBookmarksBtn");
            if (closeBtn) {
                closeBtn.addEventListener("click", () => {
                    container.style.display = "none";
                    clearAllFilters();
                });
            }

            // Load images for filtered events
            for (const e of filteredEvents) {
                getRealImage(e.name).then(imageUrl => {
                    if (imageUrl) {
                        const img = document.getElementById(`img-${e.id}`);
                        if (img) img.innerHTML = `<img src="${imageUrl}" style="width: 100%; height: auto;" />`;
                    }
                });
            }
        }

                            // Helper to generate a random password with at least one uppercase, one number, and one symbol (_ or -)
                    function generateRandomPassword(length = 10) {
                        const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                        const lower = 'abcdefghijklmnopqrstuvwxyz';
                        const numbers = '0123456789';
                        const symbols = '_-';
                        let all = upper + lower + numbers + symbols;

                        // Ensure at least one of each required character
                        let password = '';
                        password += upper[Math.floor(Math.random() * upper.length)];
                        password += numbers[Math.floor(Math.random() * numbers.length)];
                        password += symbols[Math.floor(Math.random() * symbols.length)];

                        for (let i = 3; i < length; i++) {
                            password += all[Math.floor(Math.random() * all.length)];
                        }

                        // Shuffle password
                        return password.split('').sort(() => 0.5 - Math.random()).join('');
                    }

                    // Function to send a new password to the user's email and update the account
                    async function sendNewPassword() {
                        if (!currentUserId) {
                            showNotification('No user selected', 'error');
                            return;
                        }

                        const newPassword = generateRandomPassword(10);

                        // Get anti-forgery token
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                                      document.querySelector('meta[name="__RequestVerificationToken"]')?.content;

                        try {
                            showLoading();

                            const response = await fetch('/RegistrovaniKorisniks/SendNewPassword', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                    ...(token && { 'RequestVerificationToken': token })
                                },
                                body: JSON.stringify({
                                    Id: currentUserId,
                                    NewPassword: newPassword
                                })
                            });

                            const result = await response.json();

                            if (result.success) {
                                showNotification('A new password has been sent to the user\'s email.', 'success');
                                closeUserModal();
                            } else {
                                showNotification(result.message || 'Failed to send new password.', 'error');
                            }
                        } catch (error) {
                            showNotification('An error occurred while sending the new password.', 'error');
                        } finally {
                            hideLoading();
                        }
                    }







</script>


<script>
    // ...existing JS code...

    // Function to delete current event and redirect to Delete view
    function deleteCurrentEvent() {
        if (currentEventId && confirm('Are you sure you want to delete this event?')) {
            fetch(`/Events/Delete/${currentEventId}`, {
                method: 'POST', // or 'DELETE' if your route accepts it
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // for ASP.NET MVC anti-forgery token
                }
            })
            .then(response => {
                if (response.ok) {
                    alert('Event deleted successfully.');
                    location.reload(); // Or redirect somewhere else if needed
                } else {
                    alert('Failed to delete event.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the event.');
            });
        }
    }

    let currentUserId = null;
    let originalUserData = null;

    // Function to open user modal
    function openUserModal(userId, username, email, firstName, lastName) {
        currentUserId = userId;

        // Store original data for comparison
        originalUserData = {
            username: username || '',
            email: email || '',
            firstName: firstName || '',
            lastName: lastName || ''
        };

        document.getElementById('modalUserTitle').textContent = username || 'No Username';
        document.getElementById('modalUserEmail').textContent = email || 'No Email';
        document.getElementById('modalUsername').value = username || '';
        document.getElementById('modalUserEmailInput').value = email || '';
        document.getElementById('modalUserFirstName').value = firstName || '';
        document.getElementById('modalUserLastName').value = lastName || '';
        document.getElementById('modalUserPassword').value = ''; // Always empty for security

        const modal = document.getElementById('userDetailsModal');
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // Prevent body scroll when modal is open
        document.body.style.overflow = 'hidden';
    }

    function closeUserModal() {
        const modal = document.getElementById('userDetailsModal');
        modal.classList.remove('show');

        setTimeout(() => {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }, 300);

        currentUserId = null;
        originalUserData = null;
    }

    // Function to apply user changes
    async function applyUserChanges() {
        if (!currentUserId) {
            showNotification('No user selected', 'error');
            return;
        }

        // Get form data
        const formData = {
            Id: currentUserId,
            Username: document.getElementById('modalUsername').value.trim(),
            Email: document.getElementById('modalUserEmailInput').value.trim(),
            Ime: document.getElementById('modalUserFirstName').value.trim(),
            Prezime: document.getElementById('modalUserLastName').value.trim(),
            Password: document.getElementById('modalUserPassword').value // can be empty
        };

        // Basic validation
        if (!formData.Username) {
            showNotification('Username is required', 'error');
            return;
        }
        if (!formData.Email) {
            showNotification('Email is required', 'error');
            return;
        }

        // Check if anything has changed
        const hasChanges =
            formData.Username !== originalUserData.username ||
            formData.Email !== originalUserData.email ||
            formData.Ime !== originalUserData.firstName ||
            formData.Prezime !== originalUserData.lastName ||
            (formData.Password && formData.Password.length > 0);

        if (!hasChanges) {
            showNotification('No changes detected', 'error');
            return;
        }

        try {
            showLoading();

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                          document.querySelector('meta[name="__RequestVerificationToken"]')?.content;

            const response = await fetch('/RegistrovaniKorisniks/EditModal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    ...(token && { 'RequestVerificationToken': token })
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success) {
                showNotification(result.message || 'User updated successfully!', 'success');

                // Update the display elements
                document.getElementById('modalUserTitle').textContent = formData.Username;
                document.getElementById('modalUserEmail').textContent = formData.Email;

                // Update original data
                originalUserData = {
                    username: formData.Username,
                    email: formData.Email,
                    firstName: formData.Ime,
                    lastName: formData.Prezime
                };

                // Optionally refresh the page after a delay to show updated data in the grid
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                if (result.errors && result.errors.length > 0) {
                    const errorMessages = result.errors.map(error =>
                        `${error.Field}: ${error.Errors.join(', ')}`).join('\n');
                    showNotification(`Validation errors:\n${errorMessages}`, 'error');
                } else {
                    showNotification(result.message || 'Failed to update user', 'error');
                }
            }
        } catch (error) {
            console.error('Error updating user:', error);
            showNotification('An error occurred while updating the user', 'error');
        } finally {
            hideLoading();
        }
    }

    // Function to delete current user
    function deleteCurrentUser() {
        if (currentUserId && confirm('Are you sure you want to delete this user?')) {
            fetch(`/RegistrovaniKorisniks/Delete/${currentUserId}`, {
                method: 'POST', // or 'DELETE' if your route accepts it
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // for ASP.NET MVC anti-forgery token
                }
            })
            .then(response => {
                if (response.ok) {
                    alert('User deleted successfully.');
                    location.reload(); // Or redirect somewhere else if needed
                } else {
                    alert('Failed to delete user.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the user.');
            });
        }
    }

    // Close user modal when clicking outside
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal-overlay')) {
            closeUserModal();
        }
    });
    // Close user modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeUserModal();
        }
    });



</script>



<!-- Add anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()<!-- ...existing code... -->


<style>
    /* Existing styles from your CSS file */
    .card-delete-btn {
        background-color: #ff4444;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 5px;
    }

        .card-delete-btn:hover {
            background-color: #cc0000;
        }

    .card-image-placeholder svg {
        color: #666;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .modal-overlay.show {
            opacity: 1;
        }

    .user-details-modal, .event-details-modal {
        background: white;
        border-radius: 8px;
        max-width: 900px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
        transform: scale(0.9);
        transition: transform 0.3s ease;
    }

    .modal-overlay.show .user-details-modal,
    .modal-overlay.show .event-details-modal {
        transform: scale(1);
    }

    .modal-close-btn {
        position: absolute;
        top: 15px;
        right: 15px;
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        z-index: 1001;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .modal-close-btn:hover {
            color: #000;
            background-color: #f0f0f0;
            border-radius: 50%;
        }

    .modal-content-wrapper {
        display: flex;
        padding: 20px;
        gap: 30px;
    }

    .modal-left {
        flex: 0 0 300px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .modal-right {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .user-image-container, .event-image-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
    }

    .user-image-placeholder, .event-image-placeholder {
        width: 200px;
        height: 230px;
        background-color: #f5f5f5;
        border: 2px dashed #ddd;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #999;
    }

    .user-basic-info, .event-basic-info {
        text-align: center;
    }

    .user-title, .event-title {
        font-size: 24px;
        font-weight: bold;
        margin: 0 0 8px 0;
    }

    .user-email, .event-category {
        color: #666;
        font-size: 16px;
        margin: 0 0 15px 0;
    }

    .details-section {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }

    .section-heading {
        font-size: 18px;
        font-weight: bold;
        margin: 0 0 20px 0;
        color: #333;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group.half-width {
            flex: 1;
        }

    .form-row {
        display: flex;
        gap: 15px;
    }

    .form-label {
        display: block;
        font-weight: 500;
        margin-bottom: 5px;
        color: #333;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
        background-color: #fff;
    }

        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        gap: 470px;
    }

    .btn-success {
        padding: 8px 16px;
        border: 1px solid #28a745;
        background-color: #28a745;
        color: white;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

        .btn-success:hover {
            background-color: #218838;
            border-color: #218838;
        }

    .btn-danger {
        padding: 8px 16px;
        border: 1px solid #dc3545;
        background-color: #dc3545;
        color: white;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #c82333;
        }

    /* Loading Overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.3);
        z-index: 2000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Demo styles for the example */
    .event-card {
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin: 10px;
        cursor: pointer;
        transition: box-shadow 0.3s ease;
        width: 375px;
    }

        .event-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .card-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .card-subtitle {
        color: #666;
        margin-bottom: 10px;
    }

    .card-details {
        font-size: 14px;
    }

    .detail-item {
        margin-bottom: 5px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .modal-content-wrapper {
            flex-direction: column;
            padding: 15px;
        }

        .modal-left {
            flex: none;
        }

        .form-row {
            flex-direction: column;
            gap: 10px;
        }

        .user-details-modal, .event-details-modal {
            width: 95%;
            max-height: 95vh;
        }
    }
</style>
